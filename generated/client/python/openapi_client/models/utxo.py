# coding: utf-8

"""
    Mainnet Cash

    A developer friendly bitcoin cash wallet api  This API is currently in active development, breaking changes may be made prior to official release of version 1.  **Important:** modifying this library to prematurely operate on mainnet may result in loss of funds   # noqa: E501

    The version of the OpenAPI document: 0.0.2
    Contact: hello@mainnet.cash
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Utxo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'index': 'float',
        'amount': 'Amount',
        'utxo_id': 'str',
        'transaction_id': 'str'
    }

    attribute_map = {
        'index': 'index',
        'amount': 'amount',
        'utxo_id': 'utxoId',
        'transaction_id': 'transactionId'
    }

    def __init__(self, index=None, amount=None, utxo_id=None, transaction_id=None, local_vars_configuration=None):  # noqa: E501
        """Utxo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._index = None
        self._amount = None
        self._utxo_id = None
        self._transaction_id = None
        self.discriminator = None

        if index is not None:
            self.index = index
        self.amount = amount
        self.utxo_id = utxo_id
        self.transaction_id = transaction_id

    @property
    def index(self):
        """Gets the index of this Utxo.  # noqa: E501


        :return: The index of this Utxo.  # noqa: E501
        :rtype: float
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this Utxo.


        :param index: The index of this Utxo.  # noqa: E501
        :type index: float
        """

        self._index = index

    @property
    def amount(self):
        """Gets the amount of this Utxo.  # noqa: E501


        :return: The amount of this Utxo.  # noqa: E501
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Utxo.


        :param amount: The amount of this Utxo.  # noqa: E501
        :type amount: Amount
        """
        if self.local_vars_configuration.client_side_validation and amount is None:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def utxo_id(self):
        """Gets the utxo_id of this Utxo.  # noqa: E501

        serialized outpoint  # noqa: E501

        :return: The utxo_id of this Utxo.  # noqa: E501
        :rtype: str
        """
        return self._utxo_id

    @utxo_id.setter
    def utxo_id(self, utxo_id):
        """Sets the utxo_id of this Utxo.

        serialized outpoint  # noqa: E501

        :param utxo_id: The utxo_id of this Utxo.  # noqa: E501
        :type utxo_id: str
        """
        if self.local_vars_configuration.client_side_validation and utxo_id is None:  # noqa: E501
            raise ValueError("Invalid value for `utxo_id`, must not be `None`")  # noqa: E501

        self._utxo_id = utxo_id

    @property
    def transaction_id(self):
        """Gets the transaction_id of this Utxo.  # noqa: E501

        The hash of a transaction  # noqa: E501

        :return: The transaction_id of this Utxo.  # noqa: E501
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this Utxo.

        The hash of a transaction  # noqa: E501

        :param transaction_id: The transaction_id of this Utxo.  # noqa: E501
        :type transaction_id: str
        """
        if self.local_vars_configuration.client_side_validation and transaction_id is None:  # noqa: E501
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")  # noqa: E501

        self._transaction_id = transaction_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Utxo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Utxo):
            return True

        return self.to_dict() != other.to_dict()
